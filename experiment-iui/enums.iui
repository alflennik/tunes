vals = [
  "a",
  "b",
  myAttribute: true,
  enums<[|.option1, .option2(Number), .option3|]>: [
    .option1,
    .option1,
    .option2(99)
    .option3
    .option3
  ]
]

vals[0] // "a"
vals[1] // "b"
vals.myAttribute // "true"
vals.enums // .option1
try vals.enums[0].case(.option1) // true ... true?
vals.enums[2] // .option2(99)
try vals.enums[2].case(.option2) // 2



demonArguments = (a<Number> = 0, b: <Number> = 100) => {}

[a<0> = 0, b: <0> = 100] = demonObject

v1 = [a: [b: [c:]]]

readV1 = v1.a.b.c

v2 = [.a(.b(.c))]

readV2 = try? v2.case(.a).case(.b).case(.c)

isOfficialVideo = titleContent
  .case(.musicVideo)
  .providedContentType
  .case(.commonTerm) == .officialVideo

MinType = <[
  titleContent: |
    .musicVideo: [
      providedContentType: |
        .commonTerm(|
          .officialVideo
          .officialMusicVideo
        |)
        .specialTerm(String)
      |
    ]
  |
]>

myVideo<MinType> = [
  titleContent: .musicVideo(
    providedContentType: .commonTerm(.officialVideo)
  )
]

TypeComparison = <|
  .unnested
  .associated(String, String)
  .secondary(|
    .unnested
    .associated(String)
  |)
|>

v1<TypeComparison> = .unnested
v2<TypeComparison> = .associated("a", "b")
v5<TypeComparison> = .secondary(.unnested)
v6<TypeComparison> = .secondary(.associated("g"))

OtherVal = <|
  .interesting(code: String, [String, String])
|>

otherVals<[OtherVal]> = .interesting(code: "abc", ["def", "efg"])

try otherVals[0].case(.interesting).code // "abc"
try otherVals[0].case(.interesting)[0] // ["def", "efg"]
try otherVals[0].case(.interesting)[0][1] // "def"

ElementContainer = [
  name: String
  elements: <|null, Number, [Number, Number]|>
]

val1<ElementContainer> = [name: "Container", elements: null]
val2<ElementContainer> = [name: "FirstDimension", elements: 10]
val2<ElementContainer> = [name: "Grid", elements: [10, 12]]

ElementContainer.elements // <[ ... ]>
ElementContainer.elements[0] // none
ElementContainer.elements[1] // Number
ElementContainer.elements[2] // [Number, Number]
ElementContainer.elements[2][1] // Number

BaseAttributes.omit('name)

Contributors = <[[|.artist: Artist, .contributor: OtherContributor|]]>

contributors<Contributors> = [
  [.artist: "Beck"],
  [.contributor: [type: .producedBy, .artist: "DangerMouse"]],
]

// Contributors2 = <[artist?: Artist, contributor?: OtherContributor]>

// contributors2<Contributors2> = [
//   artist: "Beck",
//   contributor: [type: .producedBy, .artist: "DangerMouse"]
// ]

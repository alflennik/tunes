UnpopulatedVideo = <[id: String, name: String]>

Video = <[...UnpopulatedVideo, height: Number, width: Number]>

unpopulatedVideos<[UnpopulatedVideo]> =
  try await getVideos().parseJson().setType(<[UnpopulatedVideo]>)

videos<[Video]> = 
  await unpopulatedVideos.each(concurrent: true,
    video => {
      dimensions = 
        await fetch("/api/video-dimensions?id=\{id}").setType(<[height: Number, width: Number]>)

      return [...video, ...dimensions]
    }
  )

--

Character = <[addHealthPoints: (Number) => null> ]>

Fruit = <[name: "", healthPoints: 0]>

createCharacter = () => {
  &healthPoints = 50

  Food = <|Fruit, /* others */|>

  eat = ([healthPoints: Number]<Food>) => {
    &healthPoints += healthPoints
  }

  result = [eat:]

  createCharacter.Return.setType(result.Type)

  return result
}

TitleContent = {
  Date = String
  
  Artist = <|
    String
    [String, disambiguationId: String]
  |>

  OtherContributor = <[
    type: |.artist(Artist), .other(String)|
    contributorType: |.producedBy, .directedBy, .starring|
 ]>

  Song = <[
    by: |Artist, [Artist]|
    title: String
    featuring?: |
      .artist: Artist,
      .artists: [Artist],
      .other: OtherContributor,
      .others: [|.artist(Artist), .contributor(OtherContributor)|]
    |
    covering?: [
      coveringType: |.cover, .remix|
      by: |Artist, [Artist]|
    ]
  ]>

  ProvidedContentType = <|
    .commonTerm(|
      .unlabeled
      .officialVideo
      .officialMusicVideo
      .musicVideo
      .mv
      .officialMv
      .officialLyricVideo
      .officialAudio
    |)
    .customTerm(String)
    .misleading([
      reason: String
      provided: |
        .commonTerm(ProvidedContentType.commonTerm.Parameters[0])
        .customTerm(ProvidedContentType.customTerm.Parameters[0])
      |,
    ])
  |>

  TitleAddendum = <[String, delimitedBy: |.parentheses, .comma, .space|]>

  OneVideoOneSong = <[
    providedContentType: ProvidedContentType
    song: Song
    titleAddendum?: TitleAddendum
  ]>

  FreeformContent = *{
    FlexibleTitleContent = <[
      ...OneVideoOneSong.omit(OneVideoOneSong.song)
      music: |Song, [Song]|
    ]>

    SpecialTitleContent = <[
      specialTitle: String
      music: |Song, [Song]|
    ]>

    *return <|
      .standard(FlexibleTitleContent)
      .special(SpecialTitleContent)
    |>
  }

  LivePerformanceContent = *{
    SpecialLiveContent = <[
      customTitle: String
      performing: |
        .performance: [
          by: |Artist, [Artists]|
        ]
        .song: Song
        .songs: [Song]
      |
      place?: |.venue(String), .other(String)|
      series?: String
    ]>

    StandardLiveContent = <[
      ...SpecialLiveContent.omit('customTitle')
      performing: |
        ...SpecialLiveContent.performing
        .performance: [
          ...SpecialLiveContent.performing.performance
          title: |
            .providedAs(String)
            .generated
          |
        ]
      |
      place?: [
        ...SpecialLiveContent.place
        delimitedBy: |.at, .on, .from|
      ]
      series?: [
        ...SpecialLiveContent.series
        delimitedBy: |.at, .on, .from|
      ]
      liveAddendum?: [String, delimitedBy: |.space, .comma|]
      titleAddendum?: TitleAddendum
    ]>
    
    *return <|
      .standard: StandardLiveContent
      .special: SpecialLiveContent
    |>

    // Examples:
    // Official title
    // Normalized title if different
    // 
    // Olivia Dean - Messy (Live)
    // 
    // XG - LEFT RIGHT (XG SHOOTING STAR LIVE STAGE)
    // XG - LEFT RIGHT (Live at XG SHOOTING STAR LIVE STAGE)
    // 
    // 蔡依林 Jolin Tsai X 茄子蛋 EggPlantEgg《浪流連 Waves Wandering》Official Live Video
    // Jolin Tsai, EggPlantEgg - Waves Wandering (Live)
    // 
    // dodie - Hot Mess EP - full film, live from the attic
    // dodie - Hot Mess EP (Live from the attic, full film)
    // 
    // The Yussef Dayes Experience - Live At Joshua Tree (Presented by Soulection)
    //
    // [LIVE] 문별 (마마무) _ G999 (Feat. 미란이) | The Booth | 더 부스 | 라이브 | 4K | Moon Byul | Mirani
    // Moon Byul - G999 feat. Mirani (Live at The Booth)
    // 
    // [4K] MoonByul - “LUNATIC” Band LIVE Concert [it's Live] K-POP live music show
    // Moon Byul - Lunatic (Live on [it's Live])
    //
    // Hans Zimmer Performs the Dune Soundtrack LIVE
    // [Special title]
    // 
    // Jungle (live) - Passengers - ARTE Concert
    // Jungle - Passengers (Live on ARTE Concert)
    // 
    // millennium parade - NEHAN, Fly with me (Live at TOKYO GARDEN THEATER)
    // 
    // CHANMINA - 美人 (BIJIN) (AREA OF DIAMOND @ Yokohama Arena)
    // CHANMINA - BIJIN (Live at Yokohama Arena, AREA OF DIAMOND)
  }
  
  *return <|
    .musicVideo(OneVideoOneSong)
    .lyricVideo(OneVideoOneSong)
    .audioVideo(OneVideoOneSong)
    .visual(FreeformContent)
    .sessionVideo(FreeformContent)
    .livePerformance(LivePerformanceContent)
    .fanVideo(FreeformContent)
    .musicTrailer // TODO: fill this out
    .promotionalVideo // TODO: fill this out
    .foundFootage
    .documentary
    .shortFilm
  |>
}

TunesVideo = <[
  youtubeVideo: [
    id: String,
    date: Date,
    duration: String,
    width: Number,
    height: Number,
    channel: String,
    title: String,
    thumbnailSrc: String,
    viewCountHistory: [[count: Number, date: Date]],
  ],
  titleContent: TitleContent,
  id: String,
  title: String,
]>

videos<[TunesVideo]> = [
  [
    youtubeVideo: [
      id: "38bw_3hQK8o",
      date: "2023-07-10",
      duration: "4:15",
      width: 3840,
      height: 2160,
      channel: "Tycho",
      title: "Tycho - Time To Run (Official Video)",
      thumbnailSrc: "https://img.youtube.com/vi/38bw_3hQK8o/maxresdefault.jpg",
    ],
    titleContent: .musicVideo([
      providedContentType: .commonTerm(.officialVideo),
      song: [by: .artist("Tycho"), title: "Time To Run" ],
      song: [by: .artist("Tycho"), title: "Time To Run" ],
    ]),
    id: autogeneratedDoNotEdit("tycho-time-to-run")
    title: autogeneratedDoNotEdit("Tycho - Time To Run")
  ],
]

firstContentType<?> =
  try? videos[0].titleContent.case(.musicVideo).providedContentType.case(commonTerm)

videos = *{
  videoList<[Video]> = []

  playlists.each(playlist => { 
    playlist.videos.each(video => videoList.add(video))
  })

  duplicates<!> = try? videoList.findDuplicates()
  if try? duplicates<!> {
    throw createError("Found duplicated videos, which is not allowed. {duplicates}")
  }

  *return videoList
}

songs = *{
  songList<[Song]> = []

  addSongs = songs => songs.each(song => songList.add(song))

  videos.each(video => {
    video.titleContent.switch(
      [[.musicVideo, .lyricVideo, .audioVideo]]: content => addSong(content.song)
      [[.visual, .sessionVideo, .fanVideo]]: content => {
        content.music.switch(
          [Song]: song => songList.add(song)
          [<[Song]>]: songs => addSongs(songs)
        )
      }
      [.livePerformance]: content => {
        content.performing.switch(
          [.song]: song => songList.add(song)
          [.songs]: songs => addSongs(songs)
          [.performance]: () => {}
        )
      }
      [[.musicTrailer, .promotionalVideo, .foundFootage, .documentary, .shortFilm]]: () => {}
    )
  })

  songList.removeDuplicates()

  *return songList
}
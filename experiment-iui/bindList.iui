getElement = () {
  container = // ...
  // ...

  bindList = generic (items<[ Generic ]>, createElement<(Generic) { HtmlElement }>) <none> {
    forceTypesToMatch(items.Item, <[ id: <""> ]>)
    forceTypesToMatch(items.Item, callback.Parameters[0])

    watch items {
      idsToElements<[ <"">: Element ]> = []

      container.elements.each((element) {
        elementId = element.getAttribute("id")<?>.forceOption()
        idsToElements[elementId] = element
      })

      itemIds<[ <""> ]> = items.each((item) { <<* item.id })

      &index = 0
      loop ***{ **{ 
        element<?> = container.elements[&index]
        item<?> = items[&index]

        if !item<?> {
          // Since all required items have been inserted any remaining elements should be removed.
          if element<?> {
            container.elements.remove(&index)
            <<**
          }
          <<***
        }

        elementId<?> = element<?>.getAttribute("id")
        
        // Correct location
        if item.id == elementId<?> { 
          &index += 1
          <<**
        }

        // Exists in wrong location
        if idsToElements[item.id] {
          container.elements.insert(&index, element)
          &index += 1
          <<**
        }

        // Shouldn't exist
        if elementId<?> && !itemIds.contains(elementId) {
          container.elements.remove(&index)
          <<**
        }

        // Missing
        if !idsToElements[item.id] {
          correctElement = createElement(item)
          container.elements.insert(&index, correctElement)
          &index += 1
          <<**
        }
      } }
    }
  }
}

container.bindList(items, (item) {
  <<* getHtml(.div(id: "\{item.id}", item.name))
})

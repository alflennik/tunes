getElement = () => {
  container = // ...
  // ...

  bindList = (
    items<[createGenericType()]>, createElement<(createGenericType()) => HtmlElement>
  )<> => {
    forceTypesToMatch(items.Item, <[id: String]>)
    forceTypesToMatch(items.Item, callback.Parameters[0])

    items.watch(() => {
      idsToElements<[[String]: HtmlElement]> = []

      container.elements.each(element => {
        elementId = try! element.getAttribute("id")
        idsToElements[elementId] = element
      })

      itemIds<[String]> = items.each(item => item.id)

      &i = 0
      while true {
        element<!> = try? container.elements[&i]
        item<!> = try? items[&i]

        if !item<!> {
          // Since all required items have been inserted any remaining elements should be removed.
          if try? element<!> {
            container.elements.remove(&i)
            break
          }
        }

        elementId<!> = try? element<!>.getAttribute("id")

        // Correct location
        if try? item.id == elementId<!> {
          &i += 1
          continue
        }

        // Exists in wrong location
        if try? idsToElements[item.id] {
          container.elements.insertAt(&i, element)
          &i += 1
          continue
        }

        // Shouldn't exist
        if try? elementId<!> && !itemIds.contains(elementId) {
          container.elements.remove(&i)
          continue
        }

        // Missing
        if try? !idsToElements[item.id] {
          correctElement = createElement(item)
          container.elements.insert(&i, correctElement)
          &i += 1
          continue
        }
      }
    })
  }
}

container.bindList(items, (item) {
  <<* getHtml(.div(id: "\{item.id}", item.name))
})

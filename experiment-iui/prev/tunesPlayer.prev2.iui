* async () {
  [playlists, otherVideos] = await concurrent(getPlaylists(), getOtherVideos())

  initializeEvent = makeEmptyEvent()
  firstInteractionEvent = makeEmptyEvent()

  listeners = [
    import("./audioDescription.iui"),
    import("./rootUi.iui"),
    import("./activeContent.iui"),
    import("./videoPlayer.iui"),
    import("./voiceSynthesized.iui"),
    import("./voicePrerecorded.iui"),
    import("./interactionInterceptor.iui"),
  ]

  listeners.each((each) {
    each.listen(.initializeEvent:)
  })

  initializeEvent.addToHandler(playlists:, otherVideos:, firstInteractionEvent:)
  initialize = initializeEvent.handler(import("./initializeEvent.iui"))

  [videoPlayer:, activeVideo:, activePlaylist<?>:, onFirstInteraction:] = initialize()

  onFirstInteraction((isVideoInteraction:, isPlayContentInteraction:) {
    handleFirstInteraction = import("./firstInteractionEvent.iui")(
      firstInteractionEvent,
      videoPlayer:,
      isVideoInteraction:
    )

    [
      audioDescription:,
      voice:,
      voiceSynthesized:,
      voicePrerecorded:
    ] = handleFirstInteraction()

    chooseContent = makeEmptyEvent()
    playEvent = makeEmptyEvent()
    pauseEvent = makeEmptyEvent()
    videoEndEvent = makeEmptyEvent()

    listeners.each((listener) {
      listener.register(chooseContent:)
      listener.register(playEvent:)
      listener.register(pauseEvent:)
      listener.register(videoEndEvent:)
    })

    chooseContent = import("./buildInitialUiEvent.iui")(buildInitialUiEvent:)
    playEvent = import("./playEvent.iui")(playEvent:)
    pauseEvent = import("./pauseEvent.iui")(pauseEvent:)
    videoEndEvent = import("./videoEndEvent.iui")(videoEndEvent:)

    if isPlayContentInteraction {
      chooseContent()
    }
  })
}

myObject = [a: 99<try Number>]

MyObject = <[a: try Number]>

createMyObject = (a: inputValue<try Number>) => {}

createMyObject(a: inputValue<try Number>)

[a:] = myObject
[a: <try Number>] = myObject
[a: myA<try Number>] = myObject

[a: outputValue<try Number> = 0 ] = [a: inputValue<try Number> = 0]

myObject = [b: <|.option1, .option2|>]

[b:] = myObject

MyObject = <[b: |.option1, .option2, .(null)|]>

[b: = .option1]<MyObject> = [b: inputValue]

[c:] = [c:]

[c: outputValue] = [c: inputValue]

[c: = ""] = [c: = ""]

[c: <try String>] = [c: <try String>]

MyObject = [b.<|[ .test1: Number, .test2: Number ]|>]

myObject<MyObject> = [b.test1: 99]

[
  b.|[
    .test1: test1<?>,
    .test2: test2<?>,
  ]|
] = myObject

if test1<?> { log("see?") }

myObject.b.switch(
  [.test1]: test1 => log(test1)
  [.test2]: test2 => log(test2)
)

myEnum.switch(
  [.test1]: () => log("It's test 1")
  [.test2]: abc => log(abc)
  [[.test3, .test4]]: abc => log(abc)
  [String]: myEnum => log(myEnum)
)

myEnum.b.switch(
  [.test1]: ([first, second, third]) => log(first, second, third)
  [.test2]: ([a:, b:]) => log(a, b)
  [.test3]: () => log("It's option 3")
  [.test4]: () => {}
  [.test5(true)]: (.test5(value)) => log("Associated value is \{value}")
  [.test5(true)]: (enumField) => log(try! enumField.wrapped)
  default: log("none of the above")
)

myEnum.switch(
  [[.("mail"), .("email")]]: () => log("recognized message type")
  [String]: () => log("secondary message type")
  default: () => log("complex message type")
)

StringEnum = <|
  .("first")
  .("second")
  .(String)
  .text(String)
|>

first<StringEnum> = "first"
second<StringEnum> = "second"
third<StringEnum> = "anything else"
text<StringEnum> = .text("And some text")

first.switch(
  [[.("first"), .("second")]]: () => log("recognized")
  [String]: () => log("something else")
  [.text(String)]: (.text(text<!>)) => log(try! text<!>)
)

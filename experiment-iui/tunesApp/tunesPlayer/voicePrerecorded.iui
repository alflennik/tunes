* () {
  [getAudio:, Audio, ...] = import("core:web")

  &status.type([.cleared, .playing, .paused]) = .cleared

  getPermissions = async () {
    * await getPromise((resolve) {
      audioElement = getAudio("./audio/none.mp3")
      audioElement.addEventListener("ended", resolve)
      audioElement.play()
    })
  }

  &activePromise.type(GetPromise(null))<?>
  &activeElement.type(Audio)<?>

  say = async (spokenItem) {
    filePath = spokenItem.filePath<?>.forceOption()
    audioElement = getAudio(filePath)

    if &activePromise<?> && &activeElement<?>.paused != false {
      await &activePromise
    }

    &activeElement = audioElement

    &activePromise = unawait getPromise((resolve) {
      endListener = () {
        &activeElement.removeEventListener("ended", endListener)
        &activeElement<?> = null
        &activePromise<?> = null
        &status = .cleared
        resolve()
      }
      activeElement.addEventListener("ended", endListener)
    })

    &status = .playing
    &activeElement.play()

    * await >< &activePromise
  }

  clear = () {
    if !&activeElement<?> : * ;
    &activeElement.pause()
    &activeElement<?> = null
    &activePromise<?> = null
    &status = .cleared
  }

  pause = () {
    if !&activeElement<?> : * ;
    &activeElement.pause()
    &status = .paused
  }

  play = () {
    if !&activeElement<?> : * ;
    &activeElement.play()
    &status = .playing
  }

  * [getPermissions:, say:, clear:, pause:, play:]
}
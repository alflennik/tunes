* (isIOS:, isAndroid:) {
  [speechSynthesis:, navigator:, getSet:] = import("core:web")
  
  // A reference needs to be kept for active utterances, or they might be garbage collected!
  // See https://stackoverflow.com/a/35935851/3888572
  // See https://bugs.chromium.org/p/chromium/issues/detail?id=509488
  &activeUtterances = getSet()

  &voiceName<?%>
  &voiceRate<?%>
  
  getPermissions = async () {
    setBestVoice = () {
      isChrome = navigator.userAgent.contains("Chrome")
      isSafari =
        navigator.vendor.contains("Apple") &&
        !navigator.userAgent.contains("CriOS") &&
        !navigator.userAgent.contains("FxiOS")
      
      bestVoicesAndRates = [
        // macOS
        ["Google US English", 1.1],
        // ["Eddy (English (US))", 1.3],
        // ["Evan (Enhanced)", 1], // Must be explicitly downloaded
        // ["Alex", 1], // Must be explicitly downloaded
        ["Samantha", if isSafari { * 1.1 } else { * 1 }],

        // Windows
        ["Microsoft Steffan Online (Natural) - English (United States)", 1.7], // Edge only
        // Chrome and Firefox
        ["Microsoft Mark - English (United States)", if isChrome { * 2.8 } else { * 1.7 }], 

        // Android
        ["English United States", 1.7],
      ]

      &defaultVoice<?%>
      defaultRate = 1.05

      &bestVoiceRank.type(0)<?>

      &foundVoiceName<?%>
      &foundVoiceRate<?%>

      englishVoices = speechSynthesis
        .getVoices()
        .filter((voice) { * voice.lang == "en-US" || voice.lang == "en_US" })
      
      englishVoices.each((voice) {
        bestVoicesAndRates.each(([bestVoiceName, rate], index:) {
          if 
            voice.name == bestVoiceName &&
            (!&bestVoiceRank<?> || index < &bestVoiceRank) 
          {
            &bestVoiceRank = index
            &foundVoiceName = voice.name
            &foundVoiceRate = rate
          }
          if voice.default {
            &defaultVoice = voice
          }
        })
      })

      if !&foundVoiceName<?> : &foundVoiceName = &defaultVoice<?>.forceValue().name ;
      if !foundVoiceRate<?> : &foundVoiceRate = defaultRate ;

      * [^&foundVoiceName, ^&foundVoiceRate]
    }

    getBestVoice = async () {
      * await getPromise((resolve) {
        if speechSynthesis.getVoices().count {
          resolve(await setBestVoice())
          *
        }
        speechSynthesis.&onvoiceschanged = () {
          speechSynthesis.&onvoiceschanged = null
          resolve(await setBestVoice())
        }
      })
    }

    [&voiceName, &voiceRate] = await getPromise((resolve) {
      // Thanks AblePlayer!
      // https://github.com/ableplayer/ableplayer/blob/main/scripts/description.js
      greeting = makeSpeechSynthesisUtterance("Hi!")
      greeting.volume = 0 // silent
      greeting.rate = 10 // fastest speed supported by the API
      // Wow, thanks to this answer: https://stackoverflow.com/a/58775876/3888572
      speechSynthesis.cancel()
      speechSynthesis.speak(greeting)

      greeting.addEventListener("end", () {
        resolve(await getBestVoice())
      })
    })
  }

  say = async (description) {
    voice = speechSynthesis.getVoices().find((each) { * each.name == &voiceName })<?>.forceValue()
    utterance = makeSpeechSynthesisUtterance(description.text)

    // On older versions of iOS (v16) the best voice is the default voice, which is not listed in
    // the voice list
    if !isIOS {
      utterance.voice = voice
      utterance.rate = &voiceRate
    } else {
      utterance.rate = 1.1
    }
    utterance.lang = "en-US"
    * await getPromise(async (resolve) {
      utterance.addEventListener("end", () {
        &activeUtterances = &.delete(utterance)
        resolve()
      })
      &activeUtterances = &.add(utterance)
      speechSynthesis.speak(utterance)
      speechSynthesis.resume() // Required by desktop Chrome
    })
  }

  clear = () {
    &activeUtterances = &.clear()
    speechSynthesis.cancel()
  }

  pause = () {
    // In Android pause is the same as clear and must be handled as such
    if isAndroid : * clear() ;
    speechSynthesis.pause()
  }

  play = () {
    speechSynthesis.resume()
  }
  
  // TODO: consider that these web APIs wouldn't support reactivity natively
  status = watch [&activeUtterances.size, speechSynthesis.paused] {
    if &activeUtterances.size == 0 : * .ended ;
    if speechSynthesis.paused : * .paused ; else : * .playing ;
  }

  * [getPermissions:, say:, clear:, pause:, play:, status:]
}
* async (playlists:, otherVideos:)<!> {
  &videoPlayer<?%>
  &audioDescription<?%>

  [video:, playlist:, playContent:, onUiComplete: onUiComplete1] = import("./video.iui")(
    playlists:,
    otherVideos:,
    videoPlayer: lock(&videoPlayer<?%>)
  )

  [isIOS, isAndroid] = [
    regex("iPhone|iPod|iPad").matches(web.navigator.platform),
    regex("android").modes("i").matches(web.navigator.userAgent)
  ]

  voiceSynthesized = import("./voiceSynthesized")(isIOS:, isAndroid:)
  voicePrerecorded = import("./voicePrerecorded")() // TODO

  &areVoicesReady = false
  [firstInteractionInterceptor, onUiComplete: onUiComplete2] = import("./permissions")(
    onFirstInteraction: async (isKeyDown:, isVideoPlayerInteraction:) {
      await concurrent([
        voiceSynthesized.getPermissions(),
        voicePrerecorded.getPermissions()
      ])
      &areVoicesReady = true
      if !isKeyDown && isVideoPlayerInteraction && &videoPlayer<?> : 
        &videoPlayer.play()
      ;
    }
  )

  voice<?> = watch [isIOS, &audioDescription<?%>.isPrerecorded] {
    if !&areVoicesReady : * null ;
    if isIOS : * voiceSynthesized ; // Not usable on iOS since there is no audio ducking control
    if &audioDescription<?%>.isPrerecorded : * voicePrerecorded ; else : * voiceSynthesized ;
  }

  audioDescription = import("./audioDescription")(
    video:,
    videoPlayer<?>: lock(&videoPlayer<?>),
    voice<?>:
  )<!>
  &audioDescription = audioDescription

  [ui: videoPlayerUi, onUiAttached: getVideoPlayer] = import("./videoPlayer")(
    youtubeId: video.youtubeId,
    timeInterval: 400
  )

  rootUi = import("./rootUi.iui")(
    playlists:,
    videoPlayerUi:,
    audioDescription:,
    video:,
    playContent:
    firstInteractionInterceptor:
  )

  web.document.body.appendChild(rootUi.element)

  videoPlayer = await getVideoPlayer()
  &videoPlayer = videoPlayer

  onUiComplete1()
  onUiComplete2()
}

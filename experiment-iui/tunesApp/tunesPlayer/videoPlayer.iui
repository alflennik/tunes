* (reconcile:, youtubeId:, timeInterval:) {
  [document, location, window, setInterval, clearInterval] = import("core:web")
  
  ui = reconcile(element("div").attributes(id: "player"))

  onUiAttached = async () {
    youtubePlayer = await Promise((resolve) {
      window.onYouTubeIframeAPIReady = () {
        youtubePlayer = window.YT.Player("player", [
          height: "315",
          width: "560",
          videoId: youtubeId,
          playerVars: [
            playsinline: 1, // Instead of immediately going full screen.
            color: "white", // Instead of youtube red.
            rel: 0, // Recommend videos from the same channel after it ends.
          ],
        ])

        youtubePlayer.addEventListener("onReady", () {
          resolve(youtubePlayer)
        })
      }

      scriptElement = document.createElement("script")
      scriptElement.src = "https://www.youtube.com/iframe_api"
      firstScriptTag = document.getElementsByTagName("script")[0]
      firstScriptTag.parentNode.insertBefore(scriptElement, firstScriptTag)
    })

    status = {
      youtubePlayer.addEventListener("onStateChange", (data) :
        given data :
          window.YT.PlayerState.UNSTARTED : * .cleared ;
          window.YT.PlayerState.PLAYING : * .playing ;
          window.YT.PlayerState.PAUSED : * .paused ;
          window.YT.PlayerState.BUFFERING : * .buffering ;
          window.YT.PlayerState.ENDED : * .ended ;
          else : break ;
        ;
      ;)

      * .cleared
    }

    time? = {
      &intervalId? = null

      watch [status] \[youtubePlayer] :
        if status == .playing && &intervalId? == null :
          &intervalId? = setInterval(() :
            if time? as time : log.info(round(time, places: 3)) ;
            * youtubePlayer.getCurrentTime()
          ;, timeInterval)
        ; else if status != .playing && &intervalId? as &intervalId :
          clearInterval(intervalId)
          &intervalId? = null
        ;
      ;

      watch [youtubeId] : * null ;
    }

    watch [youtubeId] \[youtubePlayer] {
      youtubePlayer.loadVideoById(videoId: youtubeId)
    }

    play = () : youtubePlayer.playVideo() ;

    pause = () : youtubePlayer.pauseVideo() ;

    setVolume = {
      &intervalId? = null
      &transitionVolume = 1
      &volume = 1
      youtubePlayer.setVolume(100)

      * (number) {
        if &intervalId? as intervalId : clearInterval(intervalId) ;

        &intervalId? = setInterval(() {
          if transitionVolume < volume {
            transitionVolume += 0.025
            youtubePlayer.setVolume(transitionVolume * 100)
            if isGreaterThan(transitionVolume, volume) : clearInterval(&intervalId?) ;
          }
          if transitionVolume > volume {
            transitionVolume -= 0.025
            youtubePlayer.setVolume(transitionVolume * 100)
            if isLessThan(transitionVolume, volume) : clearInterval(&intervalId?) ;
          }
        }, 25)

        &volume = number
      }
    }

    document.addEventListener("keydown", (event) {
      if event.key == "k" {
        if status == .playing : pause() ;
        if status == .paused : play() ;
      }
    })

    * [status:, time?:, play:, pause:, setVolume:, ui:]
  }

  * [ui:, onUiAttached:]
}
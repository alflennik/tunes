* async (video:, videoPlayer<?>:, voice<?>:) {
  [dynamicImport:] = import("core:web")

  SpokenItem = [text: String, filePath: String?]
  Description = [...SpokenItem, time: Number]

  [descriptions, analysis<?>] = watch [video.descriptionPath<?>] {
    module<%> = require await dynamicImport(video.descriptionPath)<!?%>
    descriptions = require module<%>.descriptions type [Description...]
    analysis<?> = try? module<?%>.analysis type SpokenItem
    * [descriptions, analysis<?>]
  }

  isPrerecorded = watch [descriptions] { * !!descriptions[0]<?>.filePath<?> }

  description<?> = watch [videoPlayer<?>.time<?>, descriptions] {
    if videoPlayer<?>.time<?>: 
      * descriptions.findLast((each) { * videoPlayer.time < each.time })
    ;
  }

  spokenItem<?> type SpokenItem<?> = watch [videoPlayer<?>.status] {
    if videoPlayer<?>.status == .cleared && analysis<?> as analysis : 
      * analysis
    ;
    * description<?>
  }

  status = {
    watch [videoPlayer<?>.status] :
      if videoPlayer<?> : 
        given videoPlayer.status :
          .cleared : * .cleared ;
          .playing : * .playing ;
          .paused, .buffering : * .paused ;
          .cleared :
            if !analysis : * .cleared ;
            * .playing
          ;
        ;
      ;
    ;
    
    watch [voice<?>.status] :
      if 
        voice<?>.status == .cleared &&
        spokenItem<?> &&
        spokenItem == analysis<?>
      :
        * .cleared
      ;
    ;

    * .cleared
  }

  section "voice" {
    isTimeSeek = watch [videoPlayer<?>.time] {
      lastTime<?> = lastValue(videoPlayer<?>.time<?>)<?>
      if videoPlayer<?>.time<?> && lastTime<?> :
        * absoluteValue(time - lastTime) > 1
      ;
      * false
    }
    
    watch [spokenItem<?>] {
      if voice<?> && spokenItem<?> {
        if isTimeSeek {
          voice.play()
          voice.say(spokenItem)
        } else {
          voice.clear()
        }
      }
    }

    watch [videoPlayer.status] {
      if voice<?> && videoPlayer<?> {
        given videoPlayer.status {
          .playing : voice.play() ;
          .paused : voice.play() ;
          .cleared : voice.clear() ;
        }
      }
    }
  }

  * [isPrerecorded:, status:]
}

* async (video:, videoPlayer?:, voice?:) {
  [dynamicImport:] = import("core:web")

  @spoken = [text: @string, filePath?: @string]
  @description = [time: @number, ...@spoken]
  @descriptions = [@description...]

  [descriptions, analysis?] = watch [video.descriptionPath] {
    module = await dynamicImport(video.descriptionPath)
    descriptions = require module["descriptions"]? as @descriptions
    analysis? = module["analysis"]? as @spoken?
    * [descriptions, analysis?]
  }

  isPrerecorded = watch [descriptions] { * !!descriptions[0]?.filePath? }

  description? = watch [videoPlayer?.time?, descriptions] {
    if videoPlayer?.time? as time : 
      * descriptions.findLast((each) { * time < each.time })
    ;
  }

  spokenItem? @spoken? = watch [videoPlayer?.status] \[description?, analysis?] {
    if videoPlayer?.status == .ended && analysis? as analysis : 
      * analysis
    ;
    * description?
  }

  status = {
    watch [videoPlayer?.status] :
      if videoPlayer? as videoPlayer : 
        given videoPlayer.status :
          .unstarted : * .cleared ;
          .playing : * .playing ;
          .paused, .buffering : * .paused ;
          .ended :
            if !analysis? : * .ended ;
            * .playing
          ;
        ;
      ;
    ;
    
    watch [voice?.status] \[spokenItem?, analysis?] :
      if spokenItem? && spokenItem? == analysis? :
        * .cleared
      ;
    ;

    * .cleared
  }

  isTimeSeek = watch [videoPlayer?.time] \[videoPlayer?] {
    if videoPlayer?.time? as time && lastValue?(time) as lastTime :
      * absoluteValue(time - lastTime) > 1
    ;
    * false
  }

  watch [spokenItem?] \[voice?, spokenItem?, isTimeSeek] {
    if voice? as voice && spokenItem? as spokenItem {
      if isTimeSeek {
        voice.play()
        voice.say(spokenItem)
      } else {
        voice.clear()
      }
    }
  }

  watch [videoPlayer?.status] \[?voice] {
    if voice? as voice && videoPlayer? as videoPlayer {
      given videoPlayer.status {
        .playing : voice.play() ;
        .paused : voice.play() ;
        .unstarted : voice.clear() ;
      }
    }
  }

  * [isPrerecorded:, status:]
}

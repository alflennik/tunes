test("there are several types expressible with square brackets", () {
  TupleWithoutFields = ["", "", true]
  TupleWithFields = ["", true, plusFields: true]
  TupleOnlyFields = [specificField1: "", anotherField2: ""]
  List = [0, ...]
  FieldList = [&: true, ...]

  actualTupleWithoutFields = ["bazinga", "abracadabra", false]
  actualTupleWithFields = ["where art thou", false, plusFields: true]
  actualTupleOnlyFields = [specificField1: "specific", anotherField2: "another"]
  actualList = [99, 100, 101, 102, ...]
  actualFieldList = [alaska: true, alabama: false, antartica: false, ...]

  expect(TupleWithoutFields.typeMatch(actualTupleWithoutFields)).toEqual(true)
  expect(TupleWithFields.typeMatch(actualTupleWithFields)).toEqual(true)
  expect(TupleOnlyFields.typeMatch(actualTupleOnlyFields)).toEqual(true)
  expect(List.typeMatch(actualList)).toEqual(true)
  expect(FieldList.typeMatch(actualFieldList)).toEqual(true)
})

test("Tuples support positional APIs", () {
  myTuple = ["Polarity", true, "Rhythm", 99, "Cause and Effect", 7.77]

  expect(myTuple[0]).toEqual("Polarity")
  expect(myTuple[2]).toEqual("Rhythm")

  [principle1, isAwesome] = myTuple

  expect(principle1).toEqual("Polarity")
  expect(isAwesome).toEqual(true)

  [_, _, principle2] = myTuple

  expect(principle2).toEqual("Rhythm")
})

test("Tuple fields support access APIs", () {
  myTupleFields = [state: "New York", population: 20,000,000]

  expect(myTupleFields.state).toEqual("New York")
  expect(myTupleFields.population).toEqual(20,000,000)

  [state:, population:] = myTupleFields

  expect(state).toEqual("New York")
  expect(population).toEqual(20,000,000)
})

test("Tuple fields can use strings as keys", () {
  myStringTuple = [["abc"]: 123, ["TWO-LETTER-CODE"]: "NY"]
  
  [["TWO-LETTER-CODE"]: twoLetterCode] = myStringTuple

  expect(myTupleFields["TWO-LETTER-CODE"]).toEqual("NY")
  expect(myTupleFields["abc"]).toEqual(123)
  expect(twoLetterCode).toEqual("NY")
})

test("Tuple fields can also support rich types as keys", () {
  user1 = [username: "elephantman2006"]
  user2 = [username: "cantcantilever"]

  passwords = [[user1]: "iloveelephants", [user2]: "actuallyicanilever"]

  expect(passwords[user1]).toEqual("iloveelephants")
  expect(passwords[user2]).toEqual("actuallyicanilever")

  [[user1]: user1Password, [user2]: user2Password] = passwords

  expect(user1Password).toEqual(passwords[user1])
  expect(user2Password).toEqual(passwords[user2])

  equivalentToUser2 = [username: "cantcantilever"]
  expect(passwords[equivalentToUser2]).toEqual("actuallyicanilever")

  otherTypeFieldset = [
    [true]: "booleans",
    [0]: "numbers, but don't think of lists",
    [0.000001]: "floats",
    [[username: "elisalphabet"]]: "user"
  ]

  expect(otherTypeFieldset[true]).toEqual("booleans")
  expect(otherTypeFieldset[0]).toEqual("numbers, but don't think of lists")
  expect(otherTypeFieldset[0.000001]).toEqual("floats")
  expect(otherTypeFieldset[[username: "elibababet"]]).toEqual("user")
})


test("Tuples support simultaneous field and positional APIs", () {
  myMixedTuple = ["listItem1", 999, keyValue1: "value1"]

  expect(myTuple[0]).toEqual("listItem1")
  expect(myTuple[1]).toEqual(999)
  expect(myTuple.keyValue1).toEqual("value1")
})

test("Lists support access APIs", () {
  myList = [99, 100, 101, 102, ...]

  expect(myList[0]<?>).toEqual(99)
  expect(myList[3]<?>).toEqual(102)
  expect(myList[99_999]<?>).toEqual(null)
})

"changing them"

"how nulls effect it"

"untyped lists"
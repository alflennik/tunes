* async (activeVideo:, videoPlayer:, voice<?>:) {
  [dynamicImport:, ...] = import("core:web")
  [element:, ...] = import("core:reconcile")

  SpokenItem = [text: "", _ filePath<?>: ""]
  Description = [...SpokenItem, time: 0]

  [descriptions, analysis<?>] = async watch activeVideo.descriptionPath<?> {
    module<%> = 
      dynamicImport(activeVideo.descriptionPath).await<?!%>.forceOption()<!%>.forceResult()<%>
  
    descriptions = module<%>.descriptions<%>.forceType([Description...])
    
    analysis<?> = module<%>.analysis<%>.checkType(SpokenItem)<?>

    * [descriptions, analysis<?>]
  }

  isPrerecorded = watch descriptions { * descriptions[0]<?>.filePath<?>.toBoolean() }

  description<?> = watch [videoPlayer.time<?>, descriptions] {
    if videoPlayer.time<?> :
      * descriptions.findLast((description) { * videoPlayer.time < description.time })<?>
    ;
  }

  spokenItem<?> = watch videoPlayer<?>.status {
    if videoPlayer.status == .cleared && analysis<?> : 
      * analysis.forceType(SpokenItem)
    ;
    * description<?>.forceType(SpokenItem)<?>
  }

  status = {
    watch videoPlayer.status :
      given videoPlayer.status :
        .cleared : * .cleared ;
        .playing : * .playing ;
        .paused, .buffering : * .paused ;
        .cleared :
          if !analysis<?> : * .cleared ;
          * .playing
        ;
      ;
    ;
    
    watch voice<?>.status :
      if 
        voice<?>.status == .cleared &&
        spokenItem<?> &&
        spokenItem == analysis<?>
      : 
        * .cleared
      ;
    ;

    * .cleared
  }

  section "voice" {
    isTimeSeek = watch videoPlayer.time {
      lastTime<?> = lastValue(videoPlayer.time<?>)<?>
      if videoPlayer.time<?> && lastTime<?> :
        * absoluteValue(videoPlayer.time - lastTime) > 1
      ;
      * false
    }
    
    watch spokenItem<?> {
      if voice<?> && spokenItem<?> {
        if isTimeSeek {
          voice.play()
          unawait voice.say(spokenItem)
        } else {
          voice.clear()
        }
      }
    }

    watch videoPlayer.status {
      if voice<?> {
        given videoPlayer.status {
          .playing : voice.play() ;
          .paused : voice.play() ;
          .cleared : voice.clear() ;
        }
      }
    }
  }

  ui = getCustomElement(name: "audio-description", [
    getDiv(class: "wrapping-box", [
      getDiv([
        watch spokenItem<?> { 
          if spokenItem<?> : * spokenItem.text ; else : * "" ; 
        }
      ])
    ])
  ])

  * [isPrerecorded:, status:, ui:]
}

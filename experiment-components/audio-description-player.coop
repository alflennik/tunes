AudioDescriptionPlayer {
  imports {
    voice
    videoPlayer
    video {
      audioDescription
    }
  }

  exports {
    audioDescriptionPlayer {
      text
    }
  }

  state {
    text
    lastVideoId
    lastTime
    lastIsPlaying
  }

  actions {
    handleVideoChange: async () => {
      voice.clear()
      
      setLastVideoId(video.id)
      setLastTime(null)
      setText(null)

      await actions.fetchDescriptions()
    }

    handlePlayChange: () => {
      setlastIsPlaying(isPlaying)
      if (!isPlaying) voice.pause()
    },

    handleTimeChange: () => {
      setLastTime(videoPlayer.time)

      let description
      for (let i = descriptions.length - 1; i >= 0; i -= 1) {
        if (time > descriptions[i].time) {
          description = descriptions[i]
          break
        }
      }

      const isTimeSeek = lastTime !== null && Math.abs(time - previousTime) > 1

      if (!isTimeSeek) {
        voice.play()
      }

      if (description && description.text !== text) {
        setText(description.text)

        if (isTimeSeek) {
          voice.clear()
        } else {
          voice.say(description.text)
        }
      }
    }
  }

  reactiveTemplate {
    if (lastVideoId !== video.id) handleSongChange()
    if (isPlaying !== isLastPlaying) handlePlayChange()
    if (time && time !== lastTime) handleTimeChange(time)

    return (
      div(class: "wrapping-box") {
        div {
          lastDescriptionText
        }
      }
    )
  }
}